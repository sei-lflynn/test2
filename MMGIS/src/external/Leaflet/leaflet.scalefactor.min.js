;(function (factory) {
    // attach your plugin to the global 'L' variable
    if (typeof window !== 'undefined' && window.L) {
        window.L.Control.ScaleFactor = factory(window.L)
        window.L.control.scalefactor = function (options) {
            return new window.L.Control.ScaleFactor(options)
        }
    }
})(function (L) {
    var ScaleFactor = L.Control.extend({
        options: {
            position: 'bottomleft',
            updateWhenIdle: true,
        },

        onAdd: function (map) {
            var className = 'leaflet-control-scalefactor',
                container = L.DomUtil.create('div', className),
                options = this.options,
                map = this._map

            this._goto = L.DomUtil.create('div', className + '-goto', container)

            if (options.mapScaleZoom != null) {
                var icon = 'undo-variant'
                var color = ''
                if (map.getZoom() == options.mapScaleZoom) {
                    icon = 'check'
                    color = 'color: lime'
                }
                this._goto.innerHTML =
                    "<i title='Mapping Scale' class='mdi mdi-" +
                    icon +
                    " mdi-14px' style='" +
                    color +
                    "'></i>"
                this._goto.addEventListener('click', function () {
                    map.setZoom(options.mapScaleZoom)
                })
            }

            map.on(
                options.updateWhenIdle ? 'moveend' : 'move',
                this._update,
                this
            )
            map.whenReady(this._update, this)

            return container
        },

        onRemove: function (map) {
            map.off(
                this.options.updateWhenIdle ? 'moveend' : 'move',
                this._update,
                this
            )
        },

        _pxTOmm: (function () {
            var heightRef = document.createElement('div')
            heightRef.style = 'height:1mm;display:none'
            heightRef.id = 'heightRef'
            document.body.appendChild(heightRef)

            heightRef = document.getElementById('heightRef')
            var pxPermm = heightRef.getBoundingClientRect().height

            heightRef.parentNode.removeChild(heightRef)

            return function pxTOmm(px) {
                return px / pxPermm
            }
        })(),

        _update: function () {
            var map = this._map

            var CenterOfMap = map.getSize().y / 2

            var RealWorlMetersPer100Pixels = map.distance(
                map.containerPointToLatLng([0, CenterOfMap]),
                map.containerPointToLatLng([100, CenterOfMap])
            )

            var ScreenMetersPer100Pixels = this._pxTOmm(100) / 1000

            var scaleFactor =
                RealWorlMetersPer100Pixels / ScreenMetersPer100Pixels

            if (this.options.radius)
                scaleFactor *= this.options.radius / 6378137
            //.replace formats the scale with commas 50000 -> 50,000
            /*
                '1:' +
                ('' + Math.round(scaleFactor)).replace(
                    /\B(?=(\d{3})+(?!\d))/g,
                    ''
                )
            */
            if (this.options.mapScaleZoom != null) {
                var icon = 'undo-variant'
                var color = ''
                if (map.getZoom() == this.options.mapScaleZoom) {
                    icon = 'check'
                    color = 'color: var(--color-green)'
                }
                this._goto.innerHTML =
                    "<i title='Mapping Scale' class='mdi mdi-" +
                    icon +
                    " mdi-14px' style='" +
                    color +
                    "'></i>"
            }
        },
    })

    return ScaleFactor
}, window)
